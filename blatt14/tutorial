
For the factor function ! 
contains a vergleichsoperation, 1, multiplication, recursion, subtraction 

A(n) = A= + max(A1, A* + Afac(n-1) + A- )
A(n) = b1 + max(b2, b3 + Afac(n-1) + b4 )
A(n) = b1 + b3 + Afac(n-1) + b4
A(n) = Afac(n-1) + const

First Aufwand class. b = const, k=0 => Afac e O(n)


3 steps 
1. bulding the polynom
2. matching variables
3. matching polynom in the complexity table

1.
    A-fib(n) = A-patternmatching + A + 2*A- + A-fib(n-1) + A-fib(n-2)
    A-fib(n) = const + A-fib(n-1) + A-fib(n-2)
    A-fib(n) <= const + 2*A-fib(n-1)
2. gleichung 
    c=2
    b=const
    k = 0
3. A-fib e o(2^n)

SIDE NOTE
A-fib(n-1) + A-fib(n-2) <= A-fib(n-1) + A-fib(n-1) 
-> 2 * A-fib(n-1)

Selection Sort
1. 
    A-sort(n) = A-reduce(n) + A-split(n) + A-sort(n-1) + const
    (where n is a list and const is all the constant operations)
    A-sort(n) = A-reduce(n) + A-split(n) + A-sort(n-1) + const
    -- reduce is always the same ( length of the list n)
    -- split has a best and worst case depending on the order 
    -- of the list. If it's already ordered it will stop 
    -- after the first element

    Best-Case:
    A-sort(n) = n * const-reduce + const-split + A-sort(n-1) + const
    A-sort(n) = A-sort(n-1) + n + const-all
    2. gleichung mit k=1 b=1 
    3. A-sort e o(n^2)

    Worst-Case ( when the minimum is in the end of the list)
    A-sort(n) = n * const-reduce + n*const-split + A-sort(n-1) + const
    A-sort(n) = A-sort(n-1) + 2*n + const-all
    2. gleichung mit k=1 b=2
    3. A-sort e o(n^2)




