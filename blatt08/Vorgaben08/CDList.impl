IMPLEMENTATION CDList

IMPORT	Nat        COMPLETELY
	NatConv    COMPLETELY
	Denotation COMPLETELY
	Seq        COMPLETELY

DATA cd == cd(name:denotation, artist:denotation, year:nat)

-- Example list for testing
DEF cdlist ==  cd("Abbey Road", "The Beatles", "1969"!)
           :: (cd("Salisbury", "Uriah Heep", "1971"!)
           :: (cd("Who's Next", "The Who", "1971"!)
           :: (cd("Exile On Main St.", "The Rolling Stones", "1972"!)
           :: (<>))))

DEF `(cd(n, a, y) )== "[" ++ n ++ ", " ++ a ++ ", " ++ `(y) ++ "]" 

FUN findCDs: seq[cd] ** nat -> seq[denotation]
DEF findCDs(cds, y) == 
    IF <>?(cds) THEN <>
    ELSE 
        IF year(ft(cds)) = y 
            THEN name(ft(cds)) :: findCDs(rt(cds), y)
        ELSE findCDs(rt(cds), y)
        FI
    FI

FUN findCDs2: seq[cd] ** nat -> seq[cd]
DEF findCDs2(cds, y) == 
    IF <>?(cds) THEN <>
    ELSE 
        IF year(ft(cds)) = y 
            THEN ft(cds) :: findCDs2(rt(cds), y)
        ELSE findCDs2(rt(cds), y)
        FI
    FI

-- Schreibt eine Funktion findCD_PM, die wie findCD aus Aufgabe 1 funktioniert und verwendet
-- dabei Pattern Matching
DEF findCD_PM(<>, _)        == <>

-- SAME AS DEF findCD_PM(::(cd, cds), y) ==
DEF findCD_PM(cd :: cds, y) == 
  IF year(cd) = y 
    THEN name(cd) :: findCD_PM(cds, y)
  ELSE findCD_PM(cds, y)
  FI


DEF findCD_PM(cd(name,_, y1) :: cds, y2) ==
  IF y1 = y2 
    THEN name :: findCD_PM(cds, y2)
  ELSE findCD_PM(cds, y2)
  FI



-- TODO Tut
